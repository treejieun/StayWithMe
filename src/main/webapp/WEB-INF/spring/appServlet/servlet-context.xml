<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
		
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/html/**" location="/resources/html/" />
	<resources mapping="/style/**" location="/resources/style/" />
	<resources mapping="/js/**" location="/resources/js/" />
	<resources mapping="/img/**" location="/resources/img/" />
	<resources mapping="/icheck-1.x/**" location="/resources/icheck-1.x/"/>
	<!-- ckEditor( DecoupledEditor ) -->
	<resources mapping="/editUpload/**" location="/resources/editUpload/" />
	<resources mapping="/upImg/**" location="/resources/upImg/" />
	

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- JdbcTemplate bean -->
	<beans:bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl" />
		<beans:property name="username" value="scott" />
		<beans:property name="password" value="tiger" />
	</beans:bean>
	
	<beans:bean name="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	
	<!-- myBatis는 SqlSessionFactoryBean클래스와 SqlSessionTemplate클래스의 객체를 이용하여 sql처리 -->
	<beans:bean id = "sqlSessionFactory" class = "org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref = "dataSource"></beans:property>
		<beans:property name="mapperLocations" value = "classpath:com/jsk/stay/dao/mapper/*.xml"></beans:property>
	</beans:bean>
	
	<!-- sql처리에 필요한 모든 메서드를 가지고 있는 객체 -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0"  ref="sqlSessionFactory"></beans:constructor-arg>
	</beans:bean>
	
	<beans:bean name = "com.jsk.stay.dao" class = "com.jsk.stay.dao.LoginDao">
	</beans:bean>
	
	<!-- JoinDao와 JoinDaoImp가 상속관계이기 때문에 Autowired할때 경로를 못 찾아감. 따라서 id를 지정해주어 그 id로 빈객체를 선언해주어야 함.  -->
	<beans:bean id = "joinDao" class="com.jsk.stay.dao.JoinDaoImp">
	</beans:bean>
	<beans:bean id = "EditDao" class="com.jsk.stay.dao.EditDaoImp">
	</beans:bean>
	<beans:bean id = "ReservationDao" class="com.jsk.stay.dao.ReservationDaoImp">
	</beans:bean>
	
	<!-- file Upload 추가부분 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- max upload size in bytes -->
		<beans:property name="maxUploadSize" value="52428800" /> <!-- 50MB -->
		<!-- max size of file in memory (in bytes) -->
		<beans:property name="maxInMemorySize" value="52428800" /> <!-- 50MB -->
	</beans:bean>
	
	<!-- transaction bean -->
	<beans:bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>
	
	<!-- transactiontemplate빈 추가 -->
	<beans:bean name="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<beans:property name="transactionManager" ref="transactionManager"></beans:property>
	</beans:bean>
	
	<!-- password 암호화 -->
	<beans:bean name="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>	
	<context:component-scan base-package="com.jsk.stay" />
	
</beans:beans>
